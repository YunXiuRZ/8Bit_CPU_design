$date
	Tue Jul 13 22:53:46 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Register_8B_t $end
$var wire 8 ! output_q [7:0] $end
$var reg 1 " clock $end
$var reg 1 # input_clear $end
$var reg 1 $ input_clock_enable $end
$var reg 8 % input_d [7:0] $end
$scope module r $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 8 & d [7:0] $end
$var wire 4 ' q2 [3:0] $end
$var wire 4 ( q1 [3:0] $end
$var wire 8 ) q [7:0] $end
$var wire 4 * d2 [3:0] $end
$var wire 4 + d1 [3:0] $end
$scope module r1 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 4 , d [3:0] $end
$var wire 4 - q [3:0] $end
$scope module r1 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 . d0 $end
$var wire 1 / d1 $end
$var wire 1 0 q1 $end
$var wire 1 1 q0 $end
$scope module f1 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 . d $end
$var reg 1 1 q $end
$upscope $end
$scope module f2 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 / d $end
$var reg 1 0 q $end
$upscope $end
$upscope $end
$scope module r2 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 2 d0 $end
$var wire 1 3 d1 $end
$var wire 1 4 q1 $end
$var wire 1 5 q0 $end
$scope module f1 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 2 d $end
$var reg 1 5 q $end
$upscope $end
$scope module f2 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 3 d $end
$var reg 1 4 q $end
$upscope $end
$upscope $end
$upscope $end
$scope module r2 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 4 6 d [3:0] $end
$var wire 4 7 q [3:0] $end
$scope module r1 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 8 d0 $end
$var wire 1 9 d1 $end
$var wire 1 : q1 $end
$var wire 1 ; q0 $end
$scope module f1 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 8 d $end
$var reg 1 ; q $end
$upscope $end
$scope module f2 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 9 d $end
$var reg 1 : q $end
$upscope $end
$upscope $end
$scope module r2 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 < d0 $end
$var wire 1 = d1 $end
$var wire 1 > q1 $end
$var wire 1 ? q0 $end
$scope module f1 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 < d $end
$var reg 1 ? q $end
$upscope $end
$scope module f2 $end
$var wire 1 # clear $end
$var wire 1 " clock $end
$var wire 1 $ clock_enable $end
$var wire 1 = d $end
$var reg 1 > q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope task test $end
$var reg 8 @ CE [7:0] $end
$var reg 8 A CLR [7:0] $end
$var reg 8 B D [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 B
b0 A
b0 @
x?
x>
0=
0<
x;
x:
09
08
bx 7
b0 6
x5
x4
03
02
x1
x0
0/
0.
bx -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
b0 &
b0 %
0$
0#
0"
bx !
$end
#25
1"
#50
0"
#75
1"
#100
0"
1$
b1 @
#125
b0 !
b0 )
01
00
05
b0 (
b0 -
04
0;
0:
0?
b0 '
b0 7
0>
1"
#150
0"
#175
1"
#200
1.
1/
12
13
18
19
1<
1=
b1111 +
b1111 ,
b1111 *
b1111 6
0"
b11111111 %
b11111111 &
b11111111 B
#225
b11111111 !
b11111111 )
11
10
15
b1111 (
b1111 -
14
1;
1:
1?
b1111 '
b1111 7
1>
1"
#250
0"
#275
1"
#300
b0 !
b0 )
01
00
05
b0 (
b0 -
04
0;
0:
0?
b0 '
b0 7
0>
0"
1#
b1 A
#325
1"
#350
0"
#375
1"
#400
0"
