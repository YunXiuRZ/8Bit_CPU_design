$date
	Thu Jul 15 22:39:16 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Decoder_t $end
$var wire 1 ! op_en_pc $end
$var wire 1 " op_en_in $end
$var wire 1 # op_en_da $end
$var wire 1 $ op_RAM_we $end
$var wire 1 % op_MUXc $end
$var wire 1 & op_MUXb $end
$var wire 1 ' op_MUXa $end
$var wire 1 ( op_ALU_s4 $end
$var wire 1 ) op_ALU_s3 $end
$var wire 1 * op_ALU_s2 $end
$var wire 1 + op_ALU_s1 $end
$var wire 1 , op_ALU_s0 $end
$var reg 1 - clock $end
$var reg 8 . ip_IR [7:0] $end
$var reg 1 / ip_carry $end
$var reg 1 0 ip_clear $end
$var reg 1 1 ip_clock_enable $end
$var reg 1 2 ip_zero $end
$scope module d $end
$var wire 1 , ALU_s0 $end
$var wire 1 + ALU_s1 $end
$var wire 1 * ALU_s2 $end
$var wire 1 ) ALU_s3 $end
$var wire 1 ( ALU_s4 $end
$var wire 8 3 IR [7:0] $end
$var wire 1 ' MUXa $end
$var wire 1 & MUXb $end
$var wire 1 4 MUXb_reg $end
$var wire 1 % MUXc $end
$var wire 1 5 MUXc_reg $end
$var wire 1 $ RAM_we $end
$var wire 1 6 a1r $end
$var wire 1 7 a2r $end
$var wire 1 / carry $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 1 clock_enable $end
$var wire 1 # en_da $end
$var wire 1 " en_in $end
$var wire 1 8 if_jump $end
$var wire 1 9 o3r $end
$var wire 1 : o5r $end
$var wire 1 ; o6r $end
$var wire 1 < o7r $end
$var wire 1 2 zero $end
$var wire 1 = zero_reg $end
$var wire 1 > sub $end
$var wire 1 ? op $end
$var wire 1 @ load $end
$var wire 1 A jumpz $end
$var wire 1 B jumpnz $end
$var wire 1 C jumpnc $end
$var wire 1 D jumpc $end
$var wire 1 E jump $end
$var wire 1 F ip $end
$var wire 1 G increment $end
$var wire 1 H fetch $end
$var wire 1 I execute $end
$var wire 1 ! en_pc $end
$var wire 1 J decode $end
$var wire 1 K carry_reg $end
$var wire 1 L bitand $end
$var wire 1 M add $end
$scope module cid $end
$var wire 8 N a [7:0] $end
$var wire 1 M add $end
$var wire 1 L bitand $end
$var wire 1 O enable $end
$var wire 1 F ip $end
$var wire 1 E jump $end
$var wire 1 D jumpc $end
$var wire 1 C jumpnc $end
$var wire 1 B jumpnz $end
$var wire 1 A jumpz $end
$var wire 1 @ load $end
$var wire 1 ? op $end
$var wire 1 > sub $end
$var wire 1 P wsub $end
$var wire 1 Q wop $end
$var wire 1 R wload $end
$var wire 1 S wjumpz $end
$var wire 1 T wjumpnz $end
$var wire 1 U wjumpnc $end
$var wire 1 V wjumpc $end
$var wire 1 W wjump $end
$var wire 1 X wip $end
$var wire 1 Y wbitand $end
$var wire 1 Z wadd $end
$var wire 1 I execute $end
$var wire 1 J decode $end
$scope module ID $end
$var wire 8 [ a [7:0] $end
$var reg 1 Z add $end
$var reg 1 Y bitand $end
$var reg 1 X ip $end
$var reg 1 W jump $end
$var reg 1 V jumpc $end
$var reg 1 U jumpnc $end
$var reg 1 T jumpnz $end
$var reg 1 S jumpz $end
$var reg 1 R load $end
$var reg 1 Q op $end
$var reg 1 P sub $end
$scope task jump_condition $end
$var reg 1 \ a2 $end
$var reg 1 ] a3 $end
$upscope $end
$upscope $end
$upscope $end
$scope module jl $end
$var wire 1 ^ c1 $end
$var wire 1 _ c2 $end
$var wire 1 ` c3 $end
$var wire 1 a c4 $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 b condition $end
$var wire 1 c ec $end
$var wire 1 ! en_pc $end
$var wire 1 d ic $end
$var wire 1 E jump $end
$var wire 1 D jumpc $end
$var wire 1 C jumpnc $end
$var wire 1 B jumpnz $end
$var wire 1 A jumpz $end
$var wire 1 e nc $end
$var wire 1 f ncondition $end
$var wire 1 g nz $end
$var wire 1 = zero_reg $end
$var wire 1 h jump_not_taken $end
$var wire 1 G increment $end
$var wire 1 I execute $end
$var wire 1 K carry_reg $end
$scope module fdc $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 f d $end
$var reg 1 h q $end
$upscope $end
$upscope $end
$scope module sq $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 1 clock_enable $end
$var reg 1 J decode $end
$var reg 1 I execute $end
$var reg 1 H fetch $end
$var reg 1 G increment $end
$upscope $end
$scope module sr $end
$var wire 1 M add $end
$var wire 1 L bitand $end
$var wire 1 / carry $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 i enable $end
$var wire 1 > sub $end
$var wire 1 2 zero $end
$var wire 1 = zero_reg $end
$var wire 1 K carry_reg $end
$scope module r $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 i clock_enable $end
$var wire 1 / d0 $end
$var wire 1 2 d1 $end
$var wire 1 = q1 $end
$var wire 1 K q0 $end
$scope module f1 $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 i clock_enable $end
$var wire 1 / d $end
$var reg 1 K q $end
$upscope $end
$scope module f2 $end
$var wire 1 0 clear $end
$var wire 1 - clock $end
$var wire 1 i clock_enable $end
$var wire 1 2 d $end
$var reg 1 = q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module FDPE $end
$var wire 1 j clock $end
$var wire 1 k clock_enable $end
$var wire 1 l d $end
$var wire 1 m preset $end
$var reg 1 n q $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xn
zm
zl
zk
zj
0i
0h
1g
1f
1e
0d
0c
0b
0a
0`
0_
0^
x]
x\
bx [
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
0O
bx N
0M
0L
0K
0J
0I
1H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
bx 3
x2
11
10
x/
bx .
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
1"
0!
$end
#25
1-
#50
0-
#75
1-
#100
0Y
0P
0U
0V
0T
0S
0W
0Z
1R
0Q
0X
0-
b0 .
b0 3
b0 N
b0 [
1/
02
00
#125
1+
1,
19
1&
1;
1:
14
1@
1O
0"
1J
0H
1h
1-
#150
0-
#175
1#
17
1I
0J
1-
#200
0-
#225
0+
0,
09
0&
0;
0:
04
1!
1*
0@
0#
1d
1(
1<
1'
0O
07
1G
0I
1-
#250
0-
#275
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#300
1Z
0R
0-
b1000000 .
b1000000 3
b1000000 N
b1000000 [
#325
19
1&
1i
14
1M
1O
0"
1J
0H
1-
#350
0-
#375
1#
0e
17
1K
1I
0J
1-
#400
0-
#425
09
0&
0i
04
1!
1*
0M
0#
1d
1(
1<
1'
0O
07
1G
0I
1-
#450
0-
#475
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#500
1Y
0Z
0-
b10000 .
b10000 3
b10000 N
b10000 [
#525
1,
19
1&
1i
1:
14
1L
1O
0"
1J
0H
1-
#550
0-
#575
1#
17
1I
0J
1-
#600
0-
#625
0,
09
0&
0i
0:
04
1!
1*
0L
0#
1d
1(
1<
1'
0O
07
1G
0I
1-
#650
0-
#675
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#700
0Y
1P
0-
b1100000 .
b1100000 3
b1100000 N
b1100000 [
#725
1*
19
1&
1i
1)
1<
14
1>
1O
0"
1J
0H
1-
#750
0-
#775
1#
17
1I
0J
1-
#800
0-
#825
09
0&
0i
0)
04
1!
0>
0#
1d
1(
1'
0O
07
1G
0I
1-
#850
0-
#875
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#900
0P
1X
0-
b10100000 .
b10100000 3
b10100000 N
b10100000 [
#925
1+
1,
19
1%
1;
1:
15
1F
1O
0"
1J
0H
1-
#950
0-
#975
1#
17
1I
0J
1-
#1000
0-
#1025
0+
0,
09
0%
0;
0:
05
1!
1*
0F
0#
1d
1(
1<
1'
0O
07
1G
0I
1-
#1050
0-
#1075
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#1100
1Q
0X
0-
b11100000 .
b11100000 3
b11100000 N
b11100000 [
#1125
1+
1%
1;
15
1?
1O
0"
1J
0H
1-
#1150
0-
#1175
1$
16
1I
0J
1-
#1200
0-
#1225
0+
0%
0;
05
1!
1*
0?
0$
1d
1(
1<
1'
0O
06
1G
0I
1-
#1250
0-
#1275
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#1300
1W
0Q
0-
b10000000 .
b10000000 3
b10000000 N
b10000000 [
#1325
1,
1+
0f
1:
1;
1b
18
1E
1O
0"
1J
0H
1-
#1350
0-
#1375
1!
1c
0h
1I
0J
1-
#1400
0-
#1425
0,
0+
1f
0:
0;
0b
08
1*
0!
0E
1(
1<
1'
0c
0O
1G
0I
1-
#1450
0-
#1475
0*
1"
0(
0<
0'
1h
1H
0G
1-
#1500
1S
0\
0]
0W
0-
b10010000 .
b10010000 3
b10010000 N
b10010000 [
#1525
1,
1+
1:
1;
18
1A
1O
0"
1J
0H
1-
#1550
0-
#1575
1I
0J
1-
#1600
0-
#1625
0,
0+
0:
0;
08
1!
1*
0A
1d
1(
1<
1'
0O
1G
0I
1-
#1650
0-
#1675
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#1700
1V
0S
1]
0-
b10011000 .
b10011000 3
b10011000 N
b10011000 [
#1725
0f
1,
1+
1b
1:
1;
18
1`
1D
1O
0"
1J
0H
1-
#1750
0-
#1775
1!
1c
0h
1I
0J
1-
#1800
0-
#1825
1f
0,
0+
0b
0:
0;
08
0`
1*
0!
0D
1(
1<
1'
0c
0O
1G
0I
1-
#1850
0-
#1875
0*
1"
0(
0<
0'
1h
1H
0G
1-
#1900
0V
1T
1\
0]
0-
b10010100 .
b10010100 3
b10010100 N
b10010100 [
#1925
0f
1,
1+
1b
1:
1;
18
1_
1B
1O
0"
1J
0H
1-
#1950
0-
#1975
1!
1c
0h
1I
0J
1-
#2000
0-
#2025
1f
0,
0+
0b
0:
0;
08
0_
1*
0!
0B
1(
1<
1'
0c
0O
1G
0I
1-
#2050
0-
#2075
0*
1"
0(
0<
0'
1h
1H
0G
1-
#2100
1U
0T
1]
0-
b10011100 .
b10011100 3
b10011100 N
b10011100 [
#2125
1,
1+
1:
1;
18
1C
1O
0"
1J
0H
1-
#2150
0-
#2175
1I
0J
1-
#2200
0-
#2225
0,
0+
0:
0;
08
1!
1*
0C
1d
1(
1<
1'
0O
1G
0I
1-
#2250
0-
#2275
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#2300
0-
#2325
1,
1+
1:
1;
18
1C
1O
0"
1J
0H
1-
#2350
0-
#2375
1I
0J
1-
#2400
0-
#2425
0,
0+
0:
0;
08
1!
1*
0C
1d
1(
1<
1'
0O
1G
0I
1-
#2450
0-
#2475
0!
0*
1"
0d
0(
0<
0'
1H
0G
1-
#2500
0-
